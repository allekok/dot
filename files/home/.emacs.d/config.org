#+TITLE: My emacs configuration file
#+AUTHOR: Payam <payambapiri.97@gmail.com>
* ~
  #+begin_src emacs-lisp
    (defun mapcar* (function &rest args)
      (if (not (memq nil args))
	  (cons (apply function (mapcar 'car args))
		(apply 'mapcar* function (mapcar 'cdr args)))))

    (defun replace-string* (from-string to-string)
      (replace-string from-string to-string nil 0 (buffer-size)))

    (defun escape-string (string)
      "Backslash escaping escape-worth characters."
      (let* ((escape-worth '(" " "(" ")" "'" "&"))
	     (to (mapcar (lambda (o) (format "\\%s" o))
			 escape-worth)))
	(with-temp-buffer
	  (insert string)
	  (mapcar* 'replace-string* escape-worth to)
	  (buffer-string))))

    ;; `string-trim' function
    (require 'subr-x)

    (setq popup-buffer-name-id -1)

    (defun popup-buffer-name ()
      (setq popup-buffer-name-id (1+ popup-buffer-name-id))
      (format "*popup:%s*" popup-buffer-name-id))

    (defun popup (string)
      (let ((buffer-name (popup-buffer-name)))
	(while (buffer-exists-p buffer-name)
	  (setq buffer-name (popup-buffer-name)))
	(generate-new-buffer buffer-name)
	(with-current-buffer buffer-name
	  (insert string)
	  (beginning-of-buffer))
	;; Could use (display-buffer)
	(switch-to-buffer buffer-name)))

    (defun uni-open (file)
      (cond
       ((file-directory-p file) (find-file file))
       ((string-suffix-list-p '(".avi" ".mp4" ".m4v" ".mkv" ".webm") file)
	(mpv file))
       ((string-suffix-list-p '(".mp3" ".wav" ".m4a") file)
	(vlc file))
       ((string-suffix-list-p '(".jpg" ".png") file)
	(feh file))
       ((string-suffix-list-p
	 '(".doc" ".docx" ".odt" ".ppt" ".pptx" ".odp") file)
	(libreoffice file))
       ((string-suffix-p ".pdf" file t) (mupdf file))
       ((string-suffix-p ".xcf" file t) (gimp file))
       (t (find-file file))))

    (defun number-of-lines (file-path)
      (string-to-number
       (string-trim
	(shell-command-to-string
	 (format "wc -l '%s'" file-path)))))

    (defun random-line ()
      (interactive)
      (goto-line (random (number-of-lines buffer-file-name))))

    (defun find-file-as-root (file)
      (interactive "FFind file as root: ")
      (find-file (concat
		  "/sudo::"
		  (expand-file-name file)))
      (message "Opening as root"))

    (defun in-list? (x L)
      (cond ((null L) L)
	    ((equal x (car L)) t)
	    (t (in-list? x (cdr L)))))
  #+end_src
* /package/
  #+begin_src emacs-lisp
    (setq package-archives '(("gnu" .
			      "https://elpa.gnu.org/packages/")
			     ("melpa-stable" .
			      "https://stable.melpa.org/packages/"))
	  package-native-compile t)
    (defun pkg (pkg-name)
      (unless (package-installed-p pkg-name)
	(package-initialize)
	(unless (assoc pkg-name package-archive-contents)
	  (package-refresh-contents))
	(package-install pkg-name)))
  #+end_src
* /package/ exwm
  #+begin_src emacs-lisp
    (when (eq 'x (window-system))
      (pkg 'exwm)
      (require 'exwm)
      (exwm-input-set-simulation-keys
       '(([?\C-p] . up)
	 ([?\C-n] . down)
	 ([?\C-a] . home)
	 ([?\C-e] . end)
	 ([?\M-v] . prior)
	 ([?\C-v] . next)
	 ([?\C-d] . delete)
	 ([?\C-k] . (S-end delete))
	 ([?\C-w] . ?\C-x)
	 ([?\M-w] . ?\C-c)
	 ([?\C-y] . ?\C-v)
	 ([?\C-s] . ?\C-f)))
      (dolist (k '(XF86AudioLowerVolume
		   XF86AudioRaiseVolume
		   XF86AudioMute
		   XF86KbdBrightnessUp
		   XF86KbdBrightnessDown
		   XF86MonBrightnessUp
		   XF86MonBrightnessDown
		   XF86LaunchA
		   XF86LaunchB
		   XF86AudioPrev
		   XF86AudioPlay))
	(cl-pushnew k exwm-input-prefix-keys))
      (setq exwm-input-global-keys
	    `(([?\s-!] . keyboard-english)
	      ([?\s-@] . keyboard-kurdish)
	      ([?\s-#] . keyboard-latin-kurdish)))
      (add-hook 'exwm-update-class-hook
		(lambda () (exwm-workspace-rename-buffer exwm-class-name)))
      (exwm-enable))
  #+end_src
* /package/ web-mode
  #+begin_src emacs-lisp
    (pkg 'web-mode)
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
    (add-to-list 'interpreter-mode-alist '("php" . web-mode))
  #+end_src
* C compilation
  #+begin_src emacs-lisp
    ;; Hook
    (add-hook 'c-mode-hook
	      (lambda ()
		(local-set-key (kbd "C-c C-c") 'c-compile-run-current-file)
		(local-set-key (kbd "C-c C-r")
			       (lambda () (interactive)
				 (c-compile-run-current-file t)))))

    ;; Function
    (defun buffer-exists-p (buffer-name)
      (defun buffer-exists-rec (buffer-name buffer-list)
	(if (consp buffer-list)
	    (if (string= buffer-name (buffer-name (car buffer-list)))
		buffer-name
	      (buffer-exists-rec buffer-name (cdr buffer-list)))))
      (buffer-exists-rec buffer-name (buffer-list)))

    (defun c-compile-run-current-file (&optional run)
      (interactive)
      (save-buffer)
      (let* ((in (buffer-file-name))
	     (out (substring in 0 -2))
	     (compiled? (c-compile-file in out "" "*c-compilation*")))
	(if (and compiled? run) (c-run-file out "" "*c-run*"))))

    (defun c-compile-file (in &optional out opts buffer)
      (let* ((out (or out (substring in 0 -2)))
	     (command (format "cc %s -o '%s' '%s'" opts out in))
	     (result (shell-command-to-string command)))
	(if (string= "" result)
	    (progn (message "Compilation finished.") t)
	  (if buffer
	      (progn
		(unless (buffer-exists-p buffer)
		  (generate-new-buffer buffer))
		(with-current-buffer buffer
		  (read-only-mode -1)
		  (erase-buffer) (insert result)
		  (compilation-mode))
		(display-buffer buffer))))))

    (defun c-run-file (o &optional opts buffer)
      (let ((command (format "'%s' %s" o opts)))
	(shell-command command buffer)
	(message "") (display-buffer buffer)))
  #+end_src
* Kurdish keyboard for emacs
  #+begin_src emacs-lisp
    (add-to-list 'load-path
		 (expand-file-name "langs" user-emacs-directory))
    ;; Input-methods
    (require 'kurdish-sorani)
    (require 'kurdish-kurmanci)

    ;; Key-bindings
    (global-set-key (kbd "s-1")
		    (lambda () (interactive)
		      (change-input-method nil "English")))
    (global-set-key (kbd "s-2")
		    (lambda () (interactive)
		      (change-input-method 'kurdish-sorani "کوردی")))
    (global-set-key (kbd "s-3")
		    (lambda () (interactive)
		      (change-input-method 'kurdish-kurmanci "Kurdî")))

    ;; Function
    (defun change-input-method (method &optional message)
      (set-input-method method)
      (message message))
  #+end_src
* org
  #+begin_src emacs-lisp
    (setq org-src-window-setup 'current-window)
    (setq org-startup-folded t)
  #+end_src
* memory
  #+begin_src emacs-lisp
    (defun memory-free ()
      (format "%.3fG"
	      (/ (nth 1 (memory-info)) 1e6)))

    (defun memory-drop-caches ()
      (interactive)
      (shell-command "sudo su -c 'echo 1 > /proc/sys/vm/drop_caches'")
      (setq memory-free (memory-free))
      (message "Memory cleared. (%s)" memory-free))
  #+end_src
* internet
  #+begin_src emacs-lisp
    (defun local-ip-address ()
      "Private IP Address"
      (string-trim (shell-command-to-string
		    "ip addr show wlp3s0 | awk 'FNR == 3 {print $2}'")))

    (defun internet? ()
      "Check Internet Connection"
      (let ((connection (car
			 (last
			  (split-string
			   (string-trim
			    (shell-command-to-string
			     "nmcli connect | head -2 | tail -1")))))))
	(if (not (string= "--" connection))
	    (local-ip-address)
	  connection)))
  #+end_src
* time
  #+begin_src emacs-lisp
    (setq display-time-format "[%R]"
	  display-time-default-load-average nil)
    (display-time)
  #+end_src
* battery
  #+begin_src emacs-lisp
    (display-battery-mode)
  #+end_src
* screen brightness
  #+begin_src emacs-lisp
    ;; Key-bindings
    (global-set-key [XF86MonBrightnessUp] 'screen-brighter)
    (global-set-key [XF86MonBrightnessDown] 'screen-darker)

    ;; Functions
    (setq screen-brightness-file
	  "/sys/class/backlight/acpi_video0/brightness")
    (setq screen-brightness-max-file
	  "/sys/class/backlight/acpi_video0/max_brightness")

    (defun screen-brightness-max ()
      (interactive)
      (with-temp-buffer
	(insert-file-contents screen-brightness-max-file)
	(string-to-number (buffer-string))))

    (defun screen-brightness-current ()
      (interactive)
      (with-temp-buffer
	(insert-file-contents screen-brightness-file)
	(string-to-number (buffer-string))))

    (defun screen-brightness-set (v &optional message-format)
      (interactive "nbrightness: ")
      (let ((message-format (or message-format "* brightness: %d")))
	(when (and (<= v (screen-brightness-max)) (>= v 0))
	  (shell-command (format "~/PROG/my-bright %i" v))
	  (message message-format v))))

    (defun screen-brighter (&optional step)
      (interactive)
      (unless step (setq step +1))
      (let ((v (+ (screen-brightness-current) step)))
	(screen-brightness-set v "+ brightness: +%d")))

    (defun screen-darker (&optional step)
      (interactive)
      (unless step (setq step -1))
      (let ((v (+ (screen-brightness-current) step)))
	(screen-brightness-set v "- brightness: -%d")))
  #+end_src
* keyboard brightness
  #+begin_src emacs-lisp
    ;; Key-bindings
    (global-set-key [XF86KbdBrightnessUp] 'kbd-brighter)
    (global-set-key [XF86KbdBrightnessDown] 'kbd-darker)

    ;; Functions
    (setq kbd-brightness-file
	  "/sys/class/leds/smc::kbd_backlight/brightness")
    (setq kbd-brightness-max-file
	  "/sys/class/leds/smc::kbd_backlight/max_brightness")

    (defun kbd-brightness-max ()
      (with-temp-buffer
	(insert-file-contents kbd-brightness-max-file)
	(string-to-number (buffer-string))))

    (defun kbd-brightness-current ()
      (with-temp-buffer
	(insert-file-contents kbd-brightness-file)
	(string-to-number (buffer-string))))

    (defun kbd-brightness-set (v &optional message-format)
      (interactive "nkbd backlight: ")
      (let ((message-format (or message-format "* kbd backlight: %d")))
	(when (and (<= v (kbd-brightness-max)) (>= v 0))
	  (shell-command (format "~/PROG/my-kbd-bright %i" v))
	  (message message-format v))))

    (defun kbd-brighter (&optional step)
      (interactive)
      (unless step (setq step +1))
      (let ((v (+ (kbd-brightness-current) step)))
	(kbd-brightness-set v "+ kbd backlight: +%d")))

    (defun kbd-darker (&optional step)
      (interactive)
      (unless step (setq step -1))
      (let ((v (+ (kbd-brightness-current) step)))
	(kbd-brightness-set v "- kbd backlight: -%d")))
  #+end_src
* volume
  #+begin_src emacs-lisp
    ;; Key-bindings
    (global-set-key [XF86AudioMute] 'volume-mute)
    (global-set-key [XF86AudioRaiseVolume] 'volume-raise)
    (global-set-key [XF86AudioLowerVolume] 'volume-lower)

    ;; Functions
    (defun volume-mute ()
      (interactive)
      (let* ((volume-mute? (volume-mute?))
	     (shell-command
	      (if volume-mute?
		  (concat "amixer set Master unmute;"
			  "amixer set Speaker unmute;"
			  "amixer set Headphone unmute")
		"amixer set Master mute")))
	(shell-command-to-string shell-command)
	(message (if volume-mute? "UNMUTE" "MUTE"))))

    (defun volume-set (v &optional message-format)
      (let ((message-format (or message-format "* volume: %s"))
	    (command (concat "amixer set Master "
			     (number-to-string v) "%")))
	(start-process-shell-command command nil command)
	(message message-format (volume-level))))

    (cl-defun volume-raise (&optional (step 2))
      (interactive)
      (let ((nv (+ step (string-to-number (volume-level)))))
	(volume-set nv "+ volume: %s")))

    (cl-defun volume-lower (&optional (step -2))
      (interactive)
      (let ((nv (+ step (string-to-number (volume-level)))))
	(volume-set nv "- volume: %s")))

    (defun volume-level ()
      (let ((vl (string-trim
		 (shell-command-to-string
		  (concat "awk -F '[][]' '{print $2}' "
			  "<(amixer get Master | tail -1)")))))
	(unless (string=
		 "amixer: Unable to find simple control 'Master',0"
		 vl)
	  vl)))

    (defun volume-mute? ()
      (string= (string-trim
		(shell-command-to-string
		 (concat "awk -F '[][]' '{print $6}' "
			 "<(amixer get Master | tail -1)")))
	       "off"))
  #+end_src
* startup
  #+begin_src emacs-lisp
    (setq inhibit-startup-screen t
	  initial-scratch-message nil)
    (defun display-startup-echo-area-message ()
      (message ""))
  #+end_src
* default buffer
  #+begin_src emacs-lisp
    (setq-default major-mode 'text-mode)
    (add-hook 'text-mode-hook 'auto-fill-mode)
  #+end_src
* desktop apps
  #+begin_src emacs-lisp
    ;; Functions
    (defun desktop-app-open (app &optional args escape)
      (when (and escape args)
	(setq args (escape-string args)))
      (start-process-shell-command
       app nil (concat app " " args)))

    (defmacro desktop-app (app &optional escape prompt)
      (let* ((app-str (symbol-name app))
	     (prompt (and prompt (format "%s%s: " prompt app-str))))
	`(defun ,app (&optional args)
	   (interactive ,prompt)
	   (desktop-app-open ,app-str args ,escape))))

    ;; Apps
    (desktop-app simplescreenrecorder)
    (desktop-app telegram-desktop)
    (desktop-app firefox)
    (desktop-app chromium)
    (desktop-app brave)
    (desktop-app st)
    (desktop-app surf t "F")
    (desktop-app mupdf t "F")
    (desktop-app vlc t "F")
    (desktop-app mpv t "F")
    (desktop-app gimp t "F")
    (desktop-app feh t "F")
    (desktop-app libreoffice t "F")

    (defun tor-browser (&optional args)
      (interactive)
      (shell-command
       "cd ~/tor-browser_en-US/ && ./start-tor-browser.desktop"))

    (defun tchromium (&optional args)
      (interactive)
      (chromium (concat "--proxy-server=socks://127.0.0.1:9050 " args)))

    (defun tbrave (&optional args)
      (interactive)
      (brave (concat "--proxy-server=socks://127.0.0.1:9050 " args)))

    (defun desktop-app-query (program)
      (interactive
       (list (read-shell-command "Program: ")))
      (start-process-shell-command
       program nil program))
    (global-set-key [XF86LaunchB] 'desktop-app-query)
  #+end_src
* X keyboard
  #+begin_src emacs-lisp
    (defun keyboard-language (layout &optional variant message)
      (start-process-shell-command
       "keyboard-language" nil
       (format "setxkbmap -layout %s -variant %s"
	       layout variant))
      (message message))

    (defun keyboard-english () (interactive)
	   (keyboard-language "us" "" "English"))

    (defun keyboard-kurdish () (interactive)
	   (keyboard-language "ir" "ku_ara" "کوردی"))

    (defun keyboard-latin-kurdish () (interactive)
	   (keyboard-language "ir" "ku" "Kurdî"))
  #+end_src
* utf-8
  #+begin_src emacs-lisp
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8)
    (setq-default locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
  #+end_src
* kill-buffer
  #+begin_src emacs-lisp
    ;; Key-bindings
    (global-set-key (kbd "C-x C-k") 'kill-buffer)
    ;; Kill all buffers
    (global-set-key (kbd "C-x ~") 'kill-buffers-all)

    ;; Functions
    (defun kill-buffers-all () (interactive)  
	   (mapc 'kill-buffer (buffer-list))
	   (cd "~")
	   (message "All buffers killed."))
  #+end_src
* dired
  #+begin_src emacs-lisp
    ;; Hooks
    (setq dired-listing-switches "-alh --group-directories-first")
    (global-set-key (kbd "C-x C-d") 'dired)
    (add-hook 'dired-mode-hook 'dired-hide-details-mode)
    (add-hook 'dired-mode-hook
	      (lambda ()
		(local-set-key
		 (kbd "!") (lambda (program)
			     (interactive
			      (list (read-shell-command "Program: ")))
			     (my-dired-shell-command program)))
		(local-set-key
		 (kbd "@") 'my-dired-run-http-server)
		(local-set-key
		 (kbd "<return>") 'my-dired-uni-open)
		(local-set-key
		 (kbd "#") 'my-dired-find-file-as-root)))

    ;; Functions
    (defun string-suffix-list-p (list item)
      (unless (null list)
	(if (string-suffix-p (car list) item t) t
	  (string-suffix-list-p (cdr list) item))))

    (defun my-dired-uni-open ()
      (interactive)
      (let ((file (dired-get-file-for-visit)))
	(cond
	 ((file-directory-p file) (dired-find-file))
	 ((string-suffix-list-p
	   '(".avi" ".mp4" ".m4v" ".mkv" ".webm") file)
	  (mpv file))
	 ((string-suffix-list-p '(".mp3" ".wav" ".m4a") file) (vlc file))
	 ((string-suffix-list-p '(".jpg" ".png") file) (feh file))
	 ((string-suffix-list-p
	   '(".doc" ".docx" ".odt" ".ppt" ".pptx" ".odp") file)
	  (libreoffice file))
	 ((string-suffix-p ".pdf" file t) (mupdf file))
	 ((string-suffix-p ".xcf" file t) (gimp file))
	 (t (dired-find-file)))))

    (defun my-dired-shell-command (program)
      (let ((file (dired-get-file-for-visit)))
	(start-process-shell-command
	 "my-dired-shell-command" nil
	 (concat program " " (escape-string file)))))

    (defun my-dired-run-http-server ()
      (interactive)
      (let ((file (dired-get-file-for-visit)))
	(if (file-directory-p file)
	    (st (concat "php -S localhost:8081 -t "
			(escape-string file)
			" & chromium --app=http://localhost:8081")))))

    (defun my-dired-find-file-as-root ()
      (interactive)
      (find-file-as-root (dired-get-file-for-visit)))
  #+end_src
* allekok
  #+begin_src emacs-lisp
    ;;; allekok-website
    ;; Open website
    (global-set-key (kbd "C-x a")
		    (lambda ()
		      (interactive)
		      (chromium "--app=https://allekok.github.io/")))
    ;; Test server
    (global-set-key (kbd "C-x A")
		    (lambda ()
		      (interactive)
		      (chromium "--app=http://localhost/")))
    ;; Show allekok/status
    (global-set-key (kbd "C-x !")
		    (lambda ()
		      (interactive)
		      (popup (string-trim (shell-command-to-string
					   (format "~/PROG/my-status"))))
		      (message "'allekok/status' Done!")
		      (org-mode)
		      (setq bidi-paragraph-direction 'right-to-left)))
    ;; my-functions
    (global-set-key (kbd "C-x j")
		    (lambda ()
		      (interactive)
		      (chromium
		       "--app=http://localhost/srv/my-functions/site/")))
    ;; Insert text in allekok style
    (defun insert-allekok (string)
      (interactive "sڕستە: ")
      (insert (propertize string 'face 'region)))
    ;; allekok search
    (defun my-allekok (word)
      (interactive "sوشە: ")
      (popup (string-trim (shell-command-to-string
			   (format "~/PROG/my-allekok '%s'"
				   (escape-string word))))))
    ;; Tewar
    (defun my-lookup (word)
      (interactive "sوشە: ")
      (popup (string-trim (shell-command-to-string
			   (format "~/PROG/my-lookup '%s' 50"
				   (escape-string word))))))
  #+end_src
* hs-minor-mode
  #+begin_src emacs-lisp
    ;; Hooks
    (add-hook 'prog-mode-hook 'hs-minor-mode)
    (add-hook 'hs-minor-mode-hook
	      (lambda ()
		(local-set-key (kbd "s-~") 'hs-toggle-all)))

    ;; Functions
    (setq hs-status-all 'show)

    (defun hs-toggle-all ()
      (interactive)
      (if (eq 'show hs-status-all)
	  (progn (hs-hide-all)
		 (setq hs-status-all 'hide))
	(hs-show-all)
	(setq hs-status-all 'show)))
  #+end_src
* bidi-toggle
  #+begin_src emacs-lisp
    ;; Key bindings
    (global-set-key [XF86AudioNext] 'bidi-toggle)

    ;; Functions
    (defun bidi-toggle ()
      (interactive)
      (setq bidi-paragraph-direction
	    (if (eq bidi-paragraph-direction
		    'right-to-left)
		'left-to-right 'right-to-left)))
  #+end_src
* git
  #+begin_src emacs-lisp
    ;; Key bindings
    (global-set-key (kbd "C-x g d")   'git-diff)
    (global-set-key (kbd "C-x g s")   'git-status)
    (global-set-key (kbd "C-x g a p") 'git-add-p)
    (global-set-key (kbd "C-x g a a") 'git-add-a)
    (global-set-key (kbd "C-x g c")   'git-commit)
    (global-set-key (kbd "C-x g l")   'git-log)

    ;; Functions
    (defun git (dir command &optional rtl)
      (let ((o (term "/bin/bash")))
	(term-send-string o (format "git %s\n" command))
	(setq bidi-display-reordering rtl)))

    (defun git-current-dir (command)
      (git default-directory command t))

    (defun git-diff   () (interactive) (git-current-dir "diff"))
    (defun git-status () (interactive) (git-current-dir "status"))
    (defun git-add-p  () (interactive) (git-current-dir "add -p"))
    (defun git-add-a  () (interactive) (git-current-dir "add -A"))
    (defun git-commit () (interactive) (git-current-dir "commit"))
    (defun git-log    () (interactive) (git-current-dir "log"))
  #+end_src
* Kurdish tools
  #+begin_src emacs-lisp
    ;; Functions
    (defun kurdish-numbers ()
      (interactive)
      (let ((en '("0" "1" "2" "3" "4" "5" "6" "7" "8" "9"))
	    (fa '("۰" "۱" "۲" "۳" "۴" "۵" "۶" "۷" "۸" "۹"))
	    (ck '("٠" "١" "٢" "٣" "٤" "٥" "٦" "٧" "٨" "٩")))
	(defun iter (from to)
	  (when (and from to)
	    (replace-string* (car from) (car to))
	    (iter (cdr from) (cdr to))))
	(iter fa ck)
	(iter en ck)))
  #+end_src
* webcam
  #+begin_src emacs-lisp
    (defun webcam ()
      "Show webcam's video in a frame"
      (interactive)
      (start-process-shell-command
       "webcam" nil "ffplay -f video4linux2 -s 640x480 -i /dev/video0"))
  #+end_src
* amusement
  #+begin_src emacs-lisp
    (defun one-of (list)
      (nth (random (length list)) list))

    ;; Amusements
    (defun random-wiki ()
      (chromium (format
		 "--app=https://%s.wikipedia.org/wiki/Special:Random"
		 (one-of '("ckb" "en" "fa")))))

    (defun random-file ()
      (uni-open (one-of (directory-files "~" t))))

    (defun random-man ()
      (defun man-list ()
	(mapcar (lambda (x)
		  (substring x 0 (1+ (string-match ")" x))))
		(split-string (shell-command-to-string
			       "man -k ''")
			      "\n" t)))
      (man (one-of (man-list))))

    (defun random-num ()
      (let* ((top 30)
	     (num (random top))
	     (prompt (format (concat "mod 2=%s | mod 3=%s | mod 5=%s | "
				     "mod 7=%s | mod 11=%s | top=%s ? ")
			     (% num 2) (% num 3) (% num 5)
			     (% num 7) (% num 11) top))
	     (ans (read-number prompt)))
	(if (= num ans)
	    (message "yay!")
	  (message "na! (%d)" num))))

    (defun random-config ()
      (find-file (one-of (directory-files "/etc" t))))

    (defun random-poem ()
      (chromium
       "--app=https://allekok.ir/script/php/random-poem.php?redirect"))

    ;; Run
    (setq amusements '(random-file
		       random-man
		       random-num
		       random-config
		       random-wiki
		       random-poem))

    (defun amuse-me ()
      (interactive)
      (funcall (one-of amusements)))

    ;; Global Key for `amuse-me'
    (global-set-key [XF86AudioPlay] 'amuse-me)
  #+end_src
* calendar
  #+begin_src emacs-lisp
    (require 'cal-persia)
    (defun my-calendar-kurdish-current-date ()
      (let ((current-date (calendar-persian-from-absolute
			   (calendar-absolute-from-gregorian
			    (calendar-current-date)))))
	(format "%s-%s-%s"
		(+ 1321 (nth 2 current-date))
		(nth 0 current-date)
		(nth 1 current-date))))
    (global-set-key [XF86AudioPrev]
		    (lambda ()
		      (interactive)
		      (insert (my-calendar-kurdish-current-date))))
  #+end_src
* appearance
  #+begin_src emacs-lisp
    ;;; Remove bars
    (set-frame-parameter nil 'vertical-scroll-bars nil)
    (menu-bar-mode -1)
    (fringe-mode '(0 . 0))

    ;;; Theme
    (defun theme-load* (theme)
      "Disable all enabled themes and load `theme'."
      (mapc 'disable-theme custom-enabled-themes)
      (load-theme theme t))

    (defun theme-toggle ()
      (interactive)
      (theme-load*
       (if (memq 'allekok-light custom-enabled-themes)
	   (progn
	     (setenv "GTK_THEME" "Adwaita:dark")
	     (kbd-brightness-set 5 "")
	     'allekok-dark)
	 (progn
	   (setenv "GTK_THEME" "Adwaita")
	   (kbd-brightness-set 0 "")
	   'allekok-light))))

    (global-set-key [XF86LaunchA] 'theme-toggle)
    (setq themes-path (expand-file-name "themes" user-emacs-directory))
    (setq custom-theme-directory themes-path)
    (add-to-list 'load-path themes-path)
    (add-to-list 'custom-safe-themes 'allekok-light)
    (add-to-list 'custom-safe-themes 'allekok-dark)
    (theme-toggle)

    ;;; Mode-line
    (add-to-list 'global-mode-string
		 (format "[%s %s]"
			 (format-time-string "%a %Y-%-m-%-d")
			 (my-calendar-kurdish-current-date))
		 t)
  #+end_src
* font
  #+begin_src emacs-lisp
    (when (eq 'x (window-system))
      (let ((ara (font-spec :family "NotoSansArabicUI"))
	    (dev (font-spec :family "NotoSansDevanagari"
			    :script "devanagari")))
	(set-fontset-font nil 'arabic ara)
	(set-fontset-font nil 'devanagari dev)))
  #+end_src
* misc
  #+begin_src emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq make-backup-files nil
	  auto-save-interval 99999999
	  auto-save-timeout  99999999
	  auto-save-default nil)
    (setq scroll-step 1
	  scroll-conservatively 5)
    (setq tramp-default-method "ssh"
	  tramp-verbose -1)
    (setq completions-detailed t)
    (setq show-paren-delay .1)
    (show-paren-mode t)

    (global-prettify-symbols-mode)
    (global-subword-mode)
    (global-goto-address-mode)

    ;; Close keys
    (global-set-key (kbd "C-x C-b") 'switch-to-buffer)
    (global-set-key (kbd "s-<tab>") 'hippie-expand)
    (global-set-key (kbd "C-x C-o") 'other-window)
    (global-set-key (kbd "C-x f") 'find-file)
    (define-key ctl-x-map [?+] 'text-scale-adjust)
    (define-key ctl-x-map [?=] 'text-scale-adjust)
    (define-key ctl-x-map [?-] 'text-scale-adjust)
    (global-set-key (kbd "C-x e") 'eval-last-sexp)
    (global-set-key (kbd "C-x C-z") 'repeat)

    (global-set-key (kbd "C-<return>") 'calculator)
    (global-set-key (kbd "C-z") 'undo)
    (global-set-key (kbd "C-S-z") 'undo-redo)

    (electric-indent-mode)
    (electric-pair-mode)

    (blink-cursor-mode -1)
    (setq-default fill-column 70
		  line-spacing 0)
    (auto-image-file-mode)

    (when (boundp 'image-map)
      (define-key image-map "=" 'image-increase-size))
    (setq safe-local-variable-values
	  '((bidi-paragraph-direction . right-to-left))
	  shr-use-colors nil)
    (setq user-full-name "Payam"
	  user-mail-address "payambapiri.97@gmail.com")
    (setq send-mail-function 'smtpmail-send-it
	  smtpmail-smtp-server "smtp.gmail.com"
	  smtpmail-smtp-service 587)
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq gnus-select-method '(nntp "news.gwene.org"))
    (with-eval-after-load 'gnutls
      (setq
       gnutls-verify-error t
       gnutls-min-prime-bits 2048
       gnutls-trustfiles '("/etc/ssl/cert.pem")))
    (setq-default tab-width 8
		  standard-indent tab-width
		  c-basic-offset tab-width
		  sgml-basic-offset tab-width
		  js-indent-level tab-width
		  css-indent-offset tab-width
		  nxml-child-indent tab-width
		  nxml-outline-child-indent tab-width
		  python-indent-offset tab-width
		  python-indent tab-width)
    (put 'upcase-region 'disabled nil)
    (put 'downcase-region 'disabled nil)

    (setq arabic-shaper-ZWNJ-handling 'as-space)

    (setq Man-notify-method 'pushy)

    (server-start)
  #+end_src
